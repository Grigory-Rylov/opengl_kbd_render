#version 330 core
in vec3 FragPos;         // Позиция фрагмента в мировых координатах
in vec3 Normal;          // Нормаль в мировых координатах
in vec3 Color;           // Цвет вершины

out vec4 outColor;       // Выходной цвет фрагмента

uniform vec3 lightPos;   // Позиция источника света
uniform vec3 lightColor; // Цвет света
uniform vec3 viewPos;    // Позиция камеры

void main() {
    // Аттенюация (постоянная для простоты)
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    // Диффузное освещение
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Отраженное освещение (блики)
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    // Итоговый цвет
    vec3 result = (ambient + diffuse + specular) * Color;
    outColor = vec4(result, 1.0);
}
